{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/proga/\\u041D\\u043E\\u0432\\u0438\\u0439-WinRAR-archive/NewManager/src/containers/Works/CreateWork/CreateWork.js\";\nimport React, { Component } from \"react\";\nimport classes from \"../../Login/Login.module.css\";\nimport Card from \"../../components/UI/Card/Card\";\nimport InputElement from \"../../components/UI/Input/Input\";\nimport ButtonElement from \"../../components/UI/Button/Button\";\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nclass CreateWork extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        WorkName: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Dota 2\"\n          },\n          label: \"Work name\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 1,\n            maxLength: 50,\n            isEmail: false\n          }\n        },\n        WorkDescription: {\n          elementType: \"textarea\",\n          elementConfig: {\n            type: \"\",\n            placeholder: \"At w3schools.com you will learn how to make a website. They offer free tutorials in all web development technologies.\"\n          },\n          label: \"Description\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 3,\n            maxLength: 500\n          }\n        },\n        WorkPassword: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Secret password\"\n          },\n          label: \"Password\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 3,\n            maxLength: 20\n          }\n        }\n      },\n      signUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          validation: { ...this.state.controls[controlName].validation,\n            valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation)\n          },\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onLogin(this.state.controls.email.value, this.state.controls.password.value);\n    };\n  }\n\n  componentDidMount() {\n    /* if (this.props.token) {\n      this.props.setRedirectPath(\"/\");\n    } else {\n      this.props.setRedirectPath(\"null\");\n    }*/\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      console.log(value);\n      isValid = pattern.test(value) && isValid;\n      console.log(isValid);\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(element => {\n      return /*#__PURE__*/_jsxDEV(InputElement, {\n        changed: event => this.inputChangedHandler(event, element.id),\n        elementType: element.config.elementType,\n        elementConfig: element.config.elementConfig,\n        invalid: !element.config.validation.valid,\n        value: element.config.value,\n        shouldValidate: element.config.validation.required,\n        touched: element.config.touched,\n        label: element.config.label\n      }, element.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this);\n    });\n    let error = null;\n\n    if (this.props.error) {\n      error = /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"style\", {\n          children: \"@import url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.errorMessage,\n          children: this.props.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this);\n      console.log(\"fefef\");\n    }\n\n    let spinner = null;\n\n    if (this.props.loading) {\n      spinner = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this);\n    }\n\n    let redirect = null;\n\n    if (this.props.redirect) {\n      redirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 18\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [spinner, /*#__PURE__*/_jsxDEV(Card, {\n        titleName: \"Log in\",\n        width: \"500px\",\n        children: [redirect, /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: this.submitHandler,\n          children: [form, error, /*#__PURE__*/_jsxDEV(ButtonElement, {\n            btnType: \"Success\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token,\n    userId: state.userId,\n    error: state.error,\n    redirect: state.redirect,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCreateWork: (name, description, password) => dispatch(actions.createWork(name, description, password)),\n    setRedirectPath: path => dispatch(actions.setRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateWork);","map":{"version":3,"sources":["/home/vladichka/proga/Новий-WinRAR-archive/NewManager/src/containers/Works/CreateWork/CreateWork.js"],"names":["React","Component","classes","Card","InputElement","ButtonElement","actionTypes","actions","connect","Redirect","Spinner","CreateWork","state","controls","WorkName","elementType","elementConfig","type","placeholder","label","touched","value","validation","required","valid","minLength","maxLength","isEmail","WorkDescription","WorkPassword","signUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onLogin","email","password","componentDidMount","rules","isValid","trim","length","pattern","console","log","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","element","error","errorMessage","spinner","loading","redirect","mapStateToProps","token","userId","mapDispatchToProps","dispatch","onCreateWork","name","description","createWork","setRedirectPath","path"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"../../Login/Login.module.css\";\nimport Card from \"../../components/UI/Card/Card\";\nimport InputElement from \"../../components/UI/Input/Input\";\nimport ButtonElement from \"../../components/UI/Button/Button\";\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nclass CreateWork extends Component {\n  state = {\n    controls: {\n      WorkName: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Dota 2\",\n        },\n        label: \"Work name\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 1,\n          maxLength: 50,\n          isEmail: false,\n        },\n      },\n      WorkDescription: {\n        elementType: \"textarea\",\n        elementConfig: {\n          type: \"\",\n          placeholder:\n            \"At w3schools.com you will learn how to make a website. They offer free tutorials in all web development technologies.\",\n        },\n        label: \"Description\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 3,\n          maxLength: 500,\n        },\n      },\n      WorkPassword: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Secret password\",\n        },\n        label: \"Password\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 3,\n          maxLength: 20,\n        },\n      },\n    },\n    signUp: true,\n  };\n  componentDidMount() {\n    /* if (this.props.token) {\n      this.props.setRedirectPath(\"/\");\n    } else {\n      this.props.setRedirectPath(\"null\");\n    }*/\n  }\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    if (rules.isEmail) {\n      const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      console.log(value);\n      isValid = pattern.test(value) && isValid;\n      console.log(isValid);\n    }\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n    return isValid;\n  }\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        validation: {\n          ...this.state.controls[controlName].validation,\n          valid: this.checkValidity(\n            event.target.value,\n            this.state.controls[controlName].validation\n          ),\n        },\n        touched: true,\n      },\n    };\n    this.setState({ controls: updatedControls });\n  };\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onLogin(\n      this.state.controls.email.value,\n      this.state.controls.password.value\n    );\n  };\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    let form = formElementsArray.map((element) => {\n      return (\n        <InputElement\n          key={element.id}\n          changed={(event) => this.inputChangedHandler(event, element.id)}\n          elementType={element.config.elementType}\n          elementConfig={element.config.elementConfig}\n          invalid={!element.config.validation.valid}\n          value={element.config.value}\n          shouldValidate={element.config.validation.required}\n          touched={element.config.touched}\n          label={element.config.label}\n        />\n      );\n    });\n    let error = null;\n    if (this.props.error) {\n      error = (\n        <React.Fragment>\n          <style>\n            @import\n            url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\n          </style>\n          <div className={classes.errorMessage}>{this.props.error}</div>\n        </React.Fragment>\n      );\n      console.log(\"fefef\");\n    }\n    let spinner = null;\n    if (this.props.loading) {\n      spinner = <Spinner />;\n    }\n    let redirect = null;\n    if (this.props.redirect) {\n      redirect = <Redirect to={this.props.redirect} />;\n    }\n    return (\n      <React.Fragment>\n        {spinner}\n        <Card titleName=\"Log in\" width=\"500px\">\n          {redirect}\n          <form className={classes.form} onSubmit={this.submitHandler}>\n            {form}\n            {error}\n            <ButtonElement btnType=\"Success\">Create</ButtonElement>\n          </form>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    token: state.token,\n    userId: state.userId,\n    error: state.error,\n    redirect: state.redirect,\n    loading: state.loading,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onCreateWork: (name, description, password) =>\n      dispatch(actions.createWork(name, description, password)),\n    setRedirectPath: (path) => dispatch(actions.setRedirectPath(path)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateWork);\n"]},"metadata":{},"sourceType":"module"}