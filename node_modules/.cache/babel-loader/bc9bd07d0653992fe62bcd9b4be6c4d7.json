{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport getWorkByPassword from \"../../functions/getWorkByPassword\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const auth = (login, password, repeatPassword, nickname) => {\n  return dispatch => {\n    dispatch(authStart());\n\n    if (nickname.length < 4 || nickname.length > 25) {\n      dispatch(authFail(\"Ooops, nickname has to be between 4 and 25 characters!\"));\n    } else if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(login) == false) {\n      dispatch(authFail(\"Ooops, it seems that email isn't correct!\"));\n    } else if (password.length < 6 || password.length > 20) {\n      dispatch(authFail(\"Ooops, password has to be between 6 and 20 characters!\"));\n    } else if (repeatPassword !== password) {\n      dispatch(authFail(\"Ooops, passwords do not match!\"));\n    } else {\n      const authData = {\n        email: login,\n        password: password,\n        returnSecureToken: true\n      };\n      axios.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyByJGBJ1ZfClAOLx6PR3391TK2f7bZM6bs\", authData).then(response => {\n        console.log(response);\n        dispatch(authSuccess(response.data.idToken, response.data.localId, nickname));\n        return axios.post(`https://strongmanagment-default-rtdb.firebaseio.com/users.json?auth=${response.data.idToken}`, {\n          nickname: nickname,\n          userId: response.data.localId\n        });\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n\n        if (typeof error == \"string\") {\n          dispatch(authFail(error));\n        } else {\n          // if error.response \"ooips email already exists\"\n          dispatch(authFail(\"Ooops user with this email already exists\"));\n        }\n      });\n    }\n  };\n};\nexport const loginStart = () => {\n  return {\n    type: actionTypes.LOGIN_START\n  };\n};\nexport const loginSuccess = (token, userId) => {\n  return {\n    type: actionTypes.LOGIN_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const loginFail = error => {\n  return {\n    type: actionTypes.LOGIN_FAIL,\n    error: error\n  };\n};\nexport const login = (login, password) => {\n  return dispatch => {\n    dispatch(loginStart());\n\n    if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(login) == false) {\n      dispatch(loginFail(\"Ooops, it seems that email isn't correct!\"));\n    } else if (password.length < 6 || password.length > 20) {\n      dispatch(loginFail(\"Ooops, password has to be between 6 and 20 characters!\"));\n    } else {\n      const authData = {\n        email: login,\n        password: password,\n        returnSecureToken: true\n      };\n      axios.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyByJGBJ1ZfClAOLx6PR3391TK2f7bZM6bs\", authData).then(response => {\n        console.log(response);\n        dispatch(loginSuccess(response.data.idToken, response.data.localId));\n      }).catch(error => {\n        console.log(error);\n\n        if (typeof error == \"string\") {\n          dispatch(loginFail(error));\n        } else {\n          // if error.response \"ooips email already exists\"\n          dispatch(loginFail(\"Ooops, login or password is incorrect\"));\n        }\n      });\n    }\n  };\n};\nexport const setPath = path => {\n  return {\n    type: actionTypes.SET_PATH,\n    path: path\n  };\n};\nexport const setRedirectPath = path => {\n  return dispatch => {\n    if (path == \"null\") {\n      dispatch(setPath(\"null\"));\n    } else {\n      dispatch(setPath(path));\n    }\n  };\n};\nexport const logout = () => {\n  return {\n    type: actionTypes.LOGOUT\n  };\n}; //\n//\n//\n\nexport const createWorkFail = error => {\n  return {\n    type: actionTypes.CREATE_WORK_FAIL,\n    error: error\n  };\n};\nexport const createWorkStart = () => {\n  return {\n    type: actionTypes.CREATE_WORK_START\n  };\n};\nexport const createWorkSuccess = () => {\n  return {\n    type: actionTypes.CREATE_WORK_SUCCESS\n  };\n};\nexport const createWork = (name, description, userId, token) => {\n  return dispatch => {\n    dispatch(createWorkStart());\n\n    if (name.length < 1 || name.length > 50) {\n      dispatch(createWorkFail(\"Ooops, name has to be between 1 and 20 characters!\"));\n    } else if (description.length < 3 || description.length > 500) {\n      dispatch(createWorkFail(\"Ooops, description has to be between 3 and 500 characters!\"));\n    } else {\n      let work = {\n        name: name,\n        description: description,\n        ownerId: userId,\n        workers: []\n      };\n      axios.get(\"https://www.uuidgenerator.net/api/version1\").then(response => {\n        console.log(response);\n        work = { ...work,\n          password: response.data\n        };\n        return axios.post(`https://strongmanagment-default-rtdb.firebaseio.com/works.json?auth=${token}`, work);\n      }).then(response => {\n        dispatch(createWorkSuccess());\n      }).catch(error => {\n        console.log(error);\n\n        if (typeof error == \"string\") {\n          dispatch(createWorkFail(error));\n        } else {\n          console.log(error); // if error.response \"ooips email already exists\"\n\n          dispatch(createWorkFail(\"Ooops, some propblem exists\"));\n        }\n      });\n    }\n  };\n};\nexport const uploadWorksStart = () => {\n  return {\n    type: actionTypes.UPLOAD_WORKS_START\n  };\n};\nexport const uploadWorksFail = error => {\n  return {\n    type: actionTypes.UPLOAD_WORKS_FAIL,\n    error: error\n  };\n};\nexport const uploadWorksSuccess = works => {\n  return {\n    type: actionTypes.UPLOAD_WORKS_SUCCESS,\n    works: works\n  };\n};\n\nfunction getUserWorks(userId, worksObject) {\n  let worksArray = [];\n  Object.keys(worksObject).map(key => {\n    if (worksObject[key].ownerId == userId) {\n      worksArray.push({ ...worksObject[key],\n        id: key\n      });\n    }\n  });\n  return worksArray;\n}\n\nexport const uploadWorks = (userId, token) => {\n  return dispatch => {\n    dispatch(uploadWorksStart());\n    axios.get(`https://strongmanagment-default-rtdb.firebaseio.com/works.json?auth=${token}`).then(response => {\n      console.log(response.data);\n      dispatch(uploadWorksSuccess(getUserWorks(userId, response.data)));\n    }).catch(error => {\n      console.log(error);\n\n      if (typeof error == \"string\") {\n        dispatch(uploadWorksFail(error));\n      } else {\n        console.log(error); // if error.response \"ooips email already exists\"\n\n        dispatch(uploadWorksFail(\"Ooops, some propblem exists\"));\n      }\n    });\n  };\n}; //\n//\n//\n//\n//\n\nexport const removeWorkStart = () => {\n  return {\n    type: actionTypes.REMOVE_WORK_START\n  };\n};\nexport const removeWorkFail = error => {\n  return {\n    type: actionTypes.REMOVE_WORK_FAIL,\n    error: error\n  };\n};\nexport const removeWorkSuccess = works => {\n  return {\n    type: actionTypes.REMOVE_WORK_SUCCESS,\n    works: works\n  };\n};\nexport const removeWork = (workId, token, prevWorks) => {\n  return dispatch => {\n    dispatch(removeWorkStart());\n    axios.delete(`https://strongmanagment-default-rtdb.firebaseio.com/works/${workId}.json?auth=${token}`).then(response => {\n      console.log(response.data);\n      let newWorks = [];\n\n      for (let i = 0; i < prevWorks.length; i++) {\n        if (prevWorks[i].id != workId) {\n          newWorks.push(prevWorks[i]);\n        }\n      }\n\n      dispatch(removeWorkSuccess(newWorks));\n    }).catch(error => {\n      dispatch(removeWorkFail(error));\n    });\n  };\n}; //\n//\n//\n\nexport const getJobStart = () => {\n  return {\n    type: actionTypes.GET_JOB_START\n  };\n};\nexport const getJobFail = error => {\n  return {\n    type: actionTypes.GET_JOB_FAIL,\n    error: error\n  };\n};\nexport const getJobSuccess = () => {\n  return {\n    type: actionTypes.GET_JOB_SUCCESS\n  };\n};\nexport const getJob = (password, userId, token) => {\n  return dispatch => {\n    dispatch(getJobStart());\n\n    if (password.length != 36) {\n      dispatch(getJobFail(\"Ooops,password must be 36 characters long\"));\n    } else {\n      axios.get(`https://strongmanagment-default-rtdb.firebaseio.com/works.json?auth=${token}`).then(response => {\n        console.log(response.data);\n        let allWorks = response.data;\n        let findedWork = getWorkByPassword(allWorks, password);\n\n        if (findedWork.error) {\n          return Promise.reject(findedWork.error);\n        } else {\n          let findedWorkValue = findedWork.work;\n          let updatedWorkers = [];\n          console.log(findedWorkValue + \"findedWork\");\n\n          if (findedWorkValue.workers) {\n            console.log(findedWorkValue.workers + \"findedWork.workers\");\n            updatedWorkers = findedWorkValue.workers;\n            updatedWorkers.push(userId);\n          } else {\n            updatedWorkers.push(userId);\n          }\n\n          console.log(updatedWorkers + \"updated workers\");\n          let updatedWork = { ...findedWorkValue,\n            workers: updatedWorkers\n          };\n          console.log(findedWork.id);\n          return axios.patch(`https://strongmanagment-default-rtdb.firebaseio.com/works/${findedWorkValue.id}.json?auth=${token}`, updatedWork);\n        }\n      }).then(response => {\n        console.log(response);\n        dispatch(getJobSuccess());\n      }).catch(error => {\n        console.log(error);\n        dispatch(getJobFail(error));\n      });\n    }\n  };\n};\nexport const setRedirectWorkPath = path => {\n  return {\n    type: actionTypes.SET_REDIRECT_WORK_PATH,\n    path: path\n  };\n}; //\n//\n//\n\nexport const leaveWorkStart = () => {\n  return {\n    type: actionTypes.LEAVE_WORK_START\n  };\n};\nexport const leaveWorkFail = error => {\n  return {\n    type: actionTypes.LEAVE_WORK_FAIL,\n    error: error\n  };\n};","map":{"version":3,"sources":["C:/Users/taras/OneDrive/Рабочий стол/Evolution/Boichuk/src/store/actions/actions.js"],"names":["actionTypes","axios","getWorkByPassword","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","authFail","error","AUTH_FAIL","auth","login","password","repeatPassword","nickname","dispatch","length","test","authData","email","returnSecureToken","post","then","response","console","log","data","idToken","localId","catch","loginStart","LOGIN_START","loginSuccess","LOGIN_SUCCESS","loginFail","LOGIN_FAIL","setPath","path","SET_PATH","setRedirectPath","logout","LOGOUT","createWorkFail","CREATE_WORK_FAIL","createWorkStart","CREATE_WORK_START","createWorkSuccess","CREATE_WORK_SUCCESS","createWork","name","description","work","ownerId","workers","get","uploadWorksStart","UPLOAD_WORKS_START","uploadWorksFail","UPLOAD_WORKS_FAIL","uploadWorksSuccess","works","UPLOAD_WORKS_SUCCESS","getUserWorks","worksObject","worksArray","Object","keys","map","key","push","id","uploadWorks","removeWorkStart","REMOVE_WORK_START","removeWorkFail","REMOVE_WORK_FAIL","removeWorkSuccess","REMOVE_WORK_SUCCESS","removeWork","workId","prevWorks","delete","newWorks","i","getJobStart","GET_JOB_START","getJobFail","GET_JOB_FAIL","getJobSuccess","GET_JOB_SUCCESS","getJob","allWorks","findedWork","Promise","reject","findedWorkValue","updatedWorkers","updatedWork","patch","setRedirectWorkPath","SET_REDIRECT_WORK_PATH","leaveWorkStart","LEAVE_WORK_START","leaveWorkFail","LEAVE_WORK_FAIL"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\nimport getWorkByPassword from \"../../functions/getWorkByPassword\";\r\nexport const authStart = () => {\r\n    return { type: actionTypes.AUTH_START };\r\n};\r\nexport const authSuccess = (token, userId) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: token,\r\n        userId: userId,\r\n    };\r\n};\r\nexport const authFail = (error) => {\r\n    return { type: actionTypes.AUTH_FAIL, error: error };\r\n};\r\nexport const auth = (login, password, repeatPassword, nickname) => {\r\n    return (dispatch) => {\r\n        dispatch(authStart());\r\n        if (nickname.length < 4 || nickname.length > 25) {\r\n            dispatch(\r\n                authFail(\"Ooops, nickname has to be between 4 and 25 characters!\")\r\n            );\r\n        } else if (\r\n            /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\r\n                login\r\n            ) == false\r\n        ) {\r\n            dispatch(authFail(\"Ooops, it seems that email isn't correct!\"));\r\n        } else if (password.length < 6 || password.length > 20) {\r\n            dispatch(\r\n                authFail(\"Ooops, password has to be between 6 and 20 characters!\")\r\n            );\r\n        } else if (repeatPassword !== password) {\r\n            dispatch(authFail(\"Ooops, passwords do not match!\"));\r\n        } else {\r\n            const authData = {\r\n                email: login,\r\n                password: password,\r\n                returnSecureToken: true,\r\n            };\r\n            axios\r\n                .post(\r\n                    \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyByJGBJ1ZfClAOLx6PR3391TK2f7bZM6bs\",\r\n                    authData\r\n                )\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    dispatch(\r\n                        authSuccess(response.data.idToken, response.data.localId, nickname)\r\n                    );\r\n                    return axios.post(\r\n                        `https://strongmanagment-default-rtdb.firebaseio.com/users.json?auth=${response.data.idToken}`,\r\n                        { nickname: nickname, userId: response.data.localId }\r\n                    );\r\n                })\r\n                .then((response) => {\r\n                    console.log(response);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    if (typeof error == \"string\") {\r\n                        dispatch(authFail(error));\r\n                    } else {\r\n                        // if error.response \"ooips email already exists\"\r\n                        dispatch(authFail(\"Ooops user with this email already exists\"));\r\n                    }\r\n                });\r\n        }\r\n    };\r\n};\r\nexport const loginStart = () => {\r\n    return { type: actionTypes.LOGIN_START };\r\n};\r\nexport const loginSuccess = (token, userId) => {\r\n    return {\r\n        type: actionTypes.LOGIN_SUCCESS,\r\n        token: token,\r\n        userId: userId,\r\n    };\r\n};\r\nexport const loginFail = (error) => {\r\n    return { type: actionTypes.LOGIN_FAIL, error: error };\r\n};\r\nexport const login = (login, password) => {\r\n    return (dispatch) => {\r\n        dispatch(loginStart());\r\n        if (\r\n            /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\r\n                login\r\n            ) == false\r\n        ) {\r\n            dispatch(loginFail(\"Ooops, it seems that email isn't correct!\"));\r\n        } else if (password.length < 6 || password.length > 20) {\r\n            dispatch(\r\n                loginFail(\"Ooops, password has to be between 6 and 20 characters!\")\r\n            );\r\n        } else {\r\n            const authData = {\r\n                email: login,\r\n                password: password,\r\n                returnSecureToken: true,\r\n            };\r\n            axios\r\n                .post(\r\n                    \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyByJGBJ1ZfClAOLx6PR3391TK2f7bZM6bs\",\r\n                    authData\r\n                )\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    dispatch(loginSuccess(response.data.idToken, response.data.localId));\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    if (typeof error == \"string\") {\r\n                        dispatch(loginFail(error));\r\n                    } else {\r\n                        // if error.response \"ooips email already exists\"\r\n                        dispatch(loginFail(\"Ooops, login or password is incorrect\"));\r\n                    }\r\n                });\r\n        }\r\n    };\r\n};\r\nexport const setPath = (path) => {\r\n    return { type: actionTypes.SET_PATH, path: path };\r\n};\r\nexport const setRedirectPath = (path) => {\r\n    return (dispatch) => {\r\n        if (path == \"null\") {\r\n            dispatch(setPath(\"null\"));\r\n        } else {\r\n            dispatch(setPath(path));\r\n        }\r\n    };\r\n};\r\nexport const logout = () => {\r\n    return { type: actionTypes.LOGOUT };\r\n};\r\n//\r\n//\r\n//\r\nexport const createWorkFail = (error) => {\r\n    return { type: actionTypes.CREATE_WORK_FAIL, error: error };\r\n};\r\nexport const createWorkStart = () => {\r\n    return { type: actionTypes.CREATE_WORK_START };\r\n};\r\nexport const createWorkSuccess = () => {\r\n    return {\r\n        type: actionTypes.CREATE_WORK_SUCCESS,\r\n    };\r\n};\r\nexport const createWork = (name, description, userId, token) => {\r\n    return (dispatch) => {\r\n        dispatch(createWorkStart());\r\n\r\n        if (name.length < 1 || name.length > 50) {\r\n            dispatch(\r\n                createWorkFail(\"Ooops, name has to be between 1 and 20 characters!\")\r\n            );\r\n        } else if (description.length < 3 || description.length > 500) {\r\n            dispatch(\r\n                createWorkFail(\r\n                    \"Ooops, description has to be between 3 and 500 characters!\"\r\n                )\r\n            );\r\n        } else {\r\n            let work = {\r\n                name: name,\r\n                description: description,\r\n                ownerId: userId,\r\n                workers: [],\r\n            };\r\n\r\n            axios\r\n                .get(\"https://www.uuidgenerator.net/api/version1\")\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    work = { ...work, password: response.data };\r\n                    return axios.post(\r\n                        `https://strongmanagment-default-rtdb.firebaseio.com/works.json?auth=${token}`,\r\n                        work\r\n                    );\r\n                })\r\n                .then((response) => {\r\n                    dispatch(createWorkSuccess());\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    if (typeof error == \"string\") {\r\n                        dispatch(createWorkFail(error));\r\n                    } else {\r\n                        console.log(error);\r\n                        // if error.response \"ooips email already exists\"\r\n                        dispatch(createWorkFail(\"Ooops, some propblem exists\"));\r\n                    }\r\n                });\r\n        }\r\n    };\r\n};\r\nexport const uploadWorksStart = () => {\r\n    return { type: actionTypes.UPLOAD_WORKS_START };\r\n};\r\nexport const uploadWorksFail = (error) => {\r\n    return { type: actionTypes.UPLOAD_WORKS_FAIL, error: error };\r\n};\r\nexport const uploadWorksSuccess = (works) => {\r\n    return {\r\n        type: actionTypes.UPLOAD_WORKS_SUCCESS,\r\n        works: works,\r\n    };\r\n};\r\nfunction getUserWorks(userId, worksObject) {\r\n    let worksArray = [];\r\n    Object.keys(worksObject).map((key) => {\r\n        if (worksObject[key].ownerId == userId) {\r\n            worksArray.push({ ...worksObject[key], id: key });\r\n        }\r\n    });\r\n    return worksArray;\r\n}\r\nexport const uploadWorks = (userId, token) => {\r\n    return (dispatch) => {\r\n        dispatch(uploadWorksStart());\r\n        axios\r\n            .get(\r\n                `https://strongmanagment-default-rtdb.firebaseio.com/works.json?auth=${token}`\r\n            )\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                dispatch(uploadWorksSuccess(getUserWorks(userId, response.data)));\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                if (typeof error == \"string\") {\r\n                    dispatch(uploadWorksFail(error));\r\n                } else {\r\n                    console.log(error);\r\n                    // if error.response \"ooips email already exists\"\r\n                    dispatch(uploadWorksFail(\"Ooops, some propblem exists\"));\r\n                }\r\n            });\r\n    };\r\n};\r\n//\r\n//\r\n//\r\n//\r\n//\r\n\r\nexport const removeWorkStart = () => {\r\n    return { type: actionTypes.REMOVE_WORK_START };\r\n};\r\nexport const removeWorkFail = (error) => {\r\n    return { type: actionTypes.REMOVE_WORK_FAIL, error: error };\r\n};\r\nexport const removeWorkSuccess = (works) => {\r\n    return {\r\n        type: actionTypes.REMOVE_WORK_SUCCESS,\r\n        works: works,\r\n    };\r\n};\r\nexport const removeWork = (workId, token, prevWorks) => {\r\n    return (dispatch) => {\r\n        dispatch(removeWorkStart());\r\n        axios\r\n            .delete(\r\n                `https://strongmanagment-default-rtdb.firebaseio.com/works/${workId}.json?auth=${token}`\r\n            )\r\n            .then((response) => {\r\n                console.log(response.data);\r\n                let newWorks = [];\r\n                for (let i = 0; i < prevWorks.length; i++) {\r\n                    if (prevWorks[i].id != workId) {\r\n                        newWorks.push(prevWorks[i]);\r\n                    }\r\n                }\r\n                dispatch(removeWorkSuccess(newWorks));\r\n            })\r\n            .catch((error) => {\r\n                dispatch(removeWorkFail(error));\r\n            });\r\n    };\r\n};\r\n//\r\n//\r\n//\r\nexport const getJobStart = () => {\r\n    return { type: actionTypes.GET_JOB_START };\r\n};\r\nexport const getJobFail = (error) => {\r\n    return { type: actionTypes.GET_JOB_FAIL, error: error };\r\n};\r\nexport const getJobSuccess = () => {\r\n    return {\r\n        type: actionTypes.GET_JOB_SUCCESS,\r\n    };\r\n};\r\nexport const getJob = (password, userId, token) => {\r\n    return (dispatch) => {\r\n        dispatch(getJobStart());\r\n        if (password.length != 36) {\r\n            dispatch(getJobFail(\"Ooops,password must be 36 characters long\"));\r\n        } else {\r\n            axios\r\n                .get(\r\n                    `https://strongmanagment-default-rtdb.firebaseio.com/works.json?auth=${token}`\r\n                )\r\n                .then((response) => {\r\n                    console.log(response.data);\r\n                    let allWorks = response.data;\r\n                    let findedWork = getWorkByPassword(allWorks, password);\r\n                    if (findedWork.error) {\r\n                        return Promise.reject(findedWork.error);\r\n                    } else {\r\n                        let findedWorkValue = findedWork.work;\r\n                        let updatedWorkers = [];\r\n                        console.log(findedWorkValue + \"findedWork\");\r\n\r\n                        if (findedWorkValue.workers) {\r\n                            console.log(findedWorkValue.workers + \"findedWork.workers\");\r\n                            updatedWorkers = findedWorkValue.workers;\r\n                            updatedWorkers.push(userId);\r\n                        } else {\r\n                            updatedWorkers.push(userId);\r\n                        }\r\n                        console.log(updatedWorkers + \"updated workers\");\r\n                        let updatedWork = { ...findedWorkValue, workers: updatedWorkers };\r\n                        console.log(findedWork.id);\r\n                        return axios.patch(\r\n                            `https://strongmanagment-default-rtdb.firebaseio.com/works/${findedWorkValue.id}.json?auth=${token}`,\r\n                            updatedWork\r\n                        );\r\n                    }\r\n                })\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    dispatch(getJobSuccess());\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    dispatch(getJobFail(error));\r\n                });\r\n        }\r\n    };\r\n};\r\nexport const setRedirectWorkPath = (path) => {\r\n    return { type: actionTypes.SET_REDIRECT_WORK_PATH, path: path };\r\n};\r\n//\r\n//\r\n//\r\nexport const leaveWorkStart = () => {\r\n    return { type: actionTypes.LEAVE_WORK_START };\r\n};\r\nexport const leaveWorkFail = (error) => {\r\n    return { type: actionTypes.LEAVE_WORK_FAIL, error: error };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}