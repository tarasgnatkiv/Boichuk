{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/VladTaras/Boichuk/src/containers/GetJob/GetJob.js\";\nimport React, { Component } from \"react\";\nimport classes from \"../Login/Login.module.css\";\nimport Card from \"../../components/UI/Card/Card\";\nimport InputElement from \"../../components/UI/Input/Input\";\nimport ButtonElement from \"../../components/UI/Button/Button\";\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport checkValidity from \"../../functions/validity\";\n\nclass GetJob extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        jobPassCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"\",\n            placeholder: \"2bod7f22-453a-11eb-b378-0242ac130002\"\n          },\n          label: \"Pass code\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 36,\n            maxLength: 36,\n            isEmail: false\n          }\n        }\n      },\n      signUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          validation: { ...this.state.controls[controlName].validation,\n            valid: checkValidity(event.target.value, this.state.controls[controlName].validation)\n          },\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onGetJob(this.state.controls.jobPassCode.value, this.props.userId, this.props.token);\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(element => {\n      return /*#__PURE__*/_jsxDEV(InputElement, {\n        changed: event => this.inputChangedHandler(event, element.id),\n        elementType: element.config.elementType,\n        elementConfig: element.config.elementConfig,\n        invalid: !element.config.validation.valid,\n        value: element.config.value,\n        shouldValidate: element.config.validation.required,\n        touched: element.config.touched,\n        label: element.config.label\n      }, element.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    });\n    let error = null;\n\n    if (this.props.error) {\n      error = /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"style\", {\n          children: \"@import url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.errorMessage,\n          children: this.props.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this);\n      console.log(\"fefef\");\n    }\n\n    let spinner = null;\n\n    if (this.props.loading) {\n      spinner = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this);\n    }\n\n    let redirect = null;\n\n    if (this.props.redirectWork) {\n      redirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirectWork\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 18\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [spinner, /*#__PURE__*/_jsxDEV(Card, {\n        titleName: \"Get a job\",\n        width: \"500px\",\n        children: [redirect, /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: this.submitHandler,\n          children: [form, error, /*#__PURE__*/_jsxDEV(ButtonElement, {\n            btnType: \"Success\",\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    redirect: state.auth.redirect,\n    error: state.works.error,\n    loading: state.works.loading,\n    redirectWork: state.works.redirectWork\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetJob: (password, userId, jobId) => dispatch(actions.getJob(password, userId, jobId)),\n    setRedirectWorkPath: path => dispatch(actions.setRedirectsetRedirectWorkPathPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GetJob);","map":{"version":3,"sources":["/home/vladichka/VladTaras/Boichuk/src/containers/GetJob/GetJob.js"],"names":["React","Component","classes","Card","InputElement","ButtonElement","actionTypes","actions","connect","Redirect","Spinner","checkValidity","GetJob","state","controls","jobPassCode","elementType","elementConfig","type","placeholder","label","touched","value","validation","required","valid","minLength","maxLength","isEmail","signUp","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onGetJob","userId","token","componentDidMount","console","log","render","formElementsArray","key","push","id","config","form","map","element","error","errorMessage","spinner","loading","redirect","redirectWork","mapStateToProps","auth","works","mapDispatchToProps","dispatch","password","jobId","getJob","setRedirectWorkPath","path","setRedirectsetRedirectWorkPathPath"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"../Login/Login.module.css\";\nimport Card from \"../../components/UI/Card/Card\";\nimport InputElement from \"../../components/UI/Input/Input\";\nimport ButtonElement from \"../../components/UI/Button/Button\";\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport checkValidity from \"../../functions/validity\";\nclass GetJob extends Component {\n  state = {\n    controls: {\n      jobPassCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"\",\n          placeholder: \"2bod7f22-453a-11eb-b378-0242ac130002\",\n        },\n        label: \"Pass code\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 36,\n          maxLength: 36,\n          isEmail: false,\n        },\n      },\n    },\n    signUp: true,\n  };\n  componentDidMount() {\n    console.log(this.props);\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        validation: {\n          ...this.state.controls[controlName].validation,\n          valid: checkValidity(\n            event.target.value,\n            this.state.controls[controlName].validation\n          ),\n        },\n        touched: true,\n      },\n    };\n    this.setState({ controls: updatedControls });\n  };\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onGetJob(\n      this.state.controls.jobPassCode.value,\n      this.props.userId,\n      this.props.token\n    );\n  };\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    let form = formElementsArray.map((element) => {\n      return (\n        <InputElement\n          key={element.id}\n          changed={(event) => this.inputChangedHandler(event, element.id)}\n          elementType={element.config.elementType}\n          elementConfig={element.config.elementConfig}\n          invalid={!element.config.validation.valid}\n          value={element.config.value}\n          shouldValidate={element.config.validation.required}\n          touched={element.config.touched}\n          label={element.config.label}\n        />\n      );\n    });\n    let error = null;\n    if (this.props.error) {\n      error = (\n        <React.Fragment>\n          <style>\n            @import\n            url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\n          </style>\n          <div className={classes.errorMessage}>{this.props.error}</div>\n        </React.Fragment>\n      );\n      console.log(\"fefef\");\n    }\n    let spinner = null;\n    if (this.props.loading) {\n      spinner = <Spinner />;\n    }\n    let redirect = null;\n    if (this.props.redirectWork) {\n      redirect = <Redirect to={this.props.redirectWork} />;\n    }\n    return (\n      <React.Fragment>\n        {spinner}\n        <Card titleName=\"Get a job\" width=\"500px\">\n          {redirect}\n          <form className={classes.form} onSubmit={this.submitHandler}>\n            {form}\n            {error}\n            <ButtonElement btnType=\"Success\">OK</ButtonElement>\n          </form>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    redirect: state.auth.redirect,\n    error: state.works.error,\n    loading: state.works.loading,\n    redirectWork: state.works.redirectWork,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onGetJob: (password, userId, jobId) =>\n      dispatch(actions.getJob(password, userId, jobId)),\n    setRedirectWorkPath: (path) => dispatch(actions.setRedirectsetRedirectWorkPathPath(path)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GetJob);\n"]},"metadata":{},"sourceType":"module"}