{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/proga/\\u041D\\u043E\\u0432\\u0438\\u0439-WinRAR-archive/NewManager/src/containers/Works/Works.js\";\nimport React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport WorkComponent from \"../../components/Works/WorkComponent/WorkComponent\";\nimport classes from \"./Works.module.css\";\n\nclass MyWorks extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      works: []\n    };\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // Добавляются ли в список новые элементы?\n    // Запоминаем значение прокрутки, чтобы использовать его позже.\n    if (prevProps.works.length < this.props.works.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    this.props.onUploadWorks(this.props.userId, this.props.token);\n    this.setState({\n      works: this.props.works\n    });\n    console.log(this.state.works);\n  }\n\n  render() {\n    let worksRender = this.state.works.map((work, id) => {\n      return /*#__PURE__*/_jsxDEV(WorkComponent, {\n        description: work.description,\n        name: work.name,\n        password: work.password,\n        workId: work.id\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes.WorkList,\n        children: worksRender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading,\n    works: state.works.works\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUploadWorks: (userId, token) => dispatch(actions.uploadWorks(userId, token)),\n    setRedirectPath: path => dispatch(actions.setRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyWorks);","map":{"version":3,"sources":["/home/vladichka/proga/Новий-WinRAR-archive/NewManager/src/containers/Works/Works.js"],"names":["React","Component","actions","connect","WorkComponent","classes","MyWorks","state","works","getSnapshotBeforeUpdate","prevProps","prevState","length","props","list","listRef","current","scrollHeight","scrollTop","componentDidMount","onUploadWorks","userId","token","setState","console","log","render","worksRender","map","work","id","description","name","password","WorkList","mapStateToProps","auth","error","redirect","loading","mapDispatchToProps","dispatch","uploadWorks","setRedirectPath","path"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,oDAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BM,KAD8B,GACtB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADsB;AAAA;;AAE9BC,EAAAA,uBAAuB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC5C;AACA;AACA,QAAID,SAAS,CAACF,KAAV,CAAgBI,MAAhB,GAAyB,KAAKC,KAAL,CAAWL,KAAX,CAAiBI,MAA9C,EAAsD;AACpD,YAAME,IAAI,GAAG,KAAKC,OAAL,CAAaC,OAA1B;AACA,aAAOF,IAAI,CAACG,YAAL,GAAoBH,IAAI,CAACI,SAAhC;AACD;;AACD,WAAO,IAAP;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,KAAL,CAAWO,aAAX,CAAyB,KAAKP,KAAL,CAAWQ,MAApC,EAA4C,KAAKR,KAAL,CAAWS,KAAvD;AACA,SAAKC,QAAL,CAAc;AAAEf,MAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL;AAApB,KAAd;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWC,KAAvB;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AACP,QAAIC,WAAW,GAAG,KAAKpB,KAAL,CAAWC,KAAX,CAAiBoB,GAAjB,CAAqB,CAACC,IAAD,EAAOC,EAAP,KAAc;AACnD,0BACE,QAAC,aAAD;AAEE,QAAA,WAAW,EAAED,IAAI,CAACE,WAFpB;AAGE,QAAA,IAAI,EAAEF,IAAI,CAACG,IAHb;AAIE,QAAA,QAAQ,EAAEH,IAAI,CAACI,QAJjB;AAKE,QAAA,MAAM,EAAEJ,IAAI,CAACC;AALf,SACOA,EADP;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAViB,CAAlB;AAWA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,6BACE;AAAI,QAAA,SAAS,EAAEzB,OAAO,CAAC6B,QAAvB;AAAA,kBAAkCP;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAlC6B;;AAqChC,MAAMQ,eAAe,GAAI5B,KAAD,IAAW;AACjC,SAAO;AACLe,IAAAA,KAAK,EAAEf,KAAK,CAAC6B,IAAN,CAAWd,KADb;AAELD,IAAAA,MAAM,EAAEd,KAAK,CAAC6B,IAAN,CAAWf,MAFd;AAGLgB,IAAAA,KAAK,EAAE9B,KAAK,CAAC6B,IAAN,CAAWC,KAHb;AAILC,IAAAA,QAAQ,EAAE/B,KAAK,CAAC6B,IAAN,CAAWE,QAJhB;AAKLC,IAAAA,OAAO,EAAEhC,KAAK,CAAC6B,IAAN,CAAWG,OALf;AAML/B,IAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYA;AANd,GAAP;AAQD,CATD;;AAUA,MAAMgC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLrB,IAAAA,aAAa,EAAE,CAACC,MAAD,EAASC,KAAT,KACbmB,QAAQ,CAACvC,OAAO,CAACwC,WAAR,CAAoBrB,MAApB,EAA4BC,KAA5B,CAAD,CAFL;AAGLqB,IAAAA,eAAe,EAAGC,IAAD,IAAUH,QAAQ,CAACvC,OAAO,CAACyC,eAAR,CAAwBC,IAAxB,CAAD;AAH9B,GAAP;AAKD,CAND;;AAOA,eAAezC,OAAO,CAACgC,eAAD,EAAkBK,kBAAlB,CAAP,CAA6ClC,OAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport WorkComponent from \"../../components/Works/WorkComponent/WorkComponent\";\nimport classes from \"./Works.module.css\";\n\nclass MyWorks extends Component {\n  state = { works: [] };\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // Добавляются ли в список новые элементы?\n    // Запоминаем значение прокрутки, чтобы использовать его позже.\n    if (prevProps.works.length < this.props.works.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n  componentDidMount() {\n    this.props.onUploadWorks(this.props.userId, this.props.token);\n    this.setState({ works: this.props.works });\n    console.log(this.state.works);\n  }\n\n  render() {\n    let worksRender = this.state.works.map((work, id) => {\n      return (\n        <WorkComponent\n          key={id}\n          description={work.description}\n          name={work.name}\n          password={work.password}\n          workId={work.id}\n        />\n      );\n    });\n    return (\n      <React.Fragment>\n        <ul className={classes.WorkList}>{worksRender}</ul>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading,\n    works: state.works.works,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onUploadWorks: (userId, token) =>\n      dispatch(actions.uploadWorks(userId, token)),\n    setRedirectPath: (path) => dispatch(actions.setRedirectPath(path)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MyWorks);\n"]},"metadata":{},"sourceType":"module"}