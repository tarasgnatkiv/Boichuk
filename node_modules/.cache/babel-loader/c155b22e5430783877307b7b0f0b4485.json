{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/proga/\\u041D\\u043E\\u0432\\u0438\\u0439-WinRAR-archive/NewManager/src/containers/Works/Works.js\";\nimport React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport WorkComponent from \"../../components/Works/WorkComponent/WorkComponent\";\nimport classes from \"./Works.module.css\";\n\nclass MyWorks extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      copied: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.onUploadWorks(this.props.userId, this.props.token);\n  }\n\n  render() {\n    let works = this.props.works;\n    let worksRender = works.map(work => {\n      /*#__PURE__*/\n      _jsxDEV(WorkComponent, {\n        description: work.description,\n        name: work.name,\n        password: work.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes.WorkList,\n        children: worksRender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading,\n    works: state.works.works\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUploadWorks: (userId, token) => dispatch(actions.uploadWorks(userId, token)),\n    setRedirectPath: path => dispatch(actions.setRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyWorks);","map":{"version":3,"sources":["/home/vladichka/proga/Новий-WinRAR-archive/NewManager/src/containers/Works/Works.js"],"names":["React","Component","actions","connect","WorkComponent","classes","MyWorks","state","copied","componentDidMount","props","onUploadWorks","userId","token","render","works","worksRender","map","work","description","name","password","WorkList","mapStateToProps","auth","error","redirect","loading","mapDispatchToProps","dispatch","uploadWorks","setRedirectPath","path"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,oDAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AACA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BM,KAD8B,GACtB;AACNC,MAAAA,MAAM,EAAE;AADF,KADsB;AAAA;;AAI9BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,MAApC,EAA4C,KAAKF,KAAL,CAAWG,KAAvD;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,KAAKL,KAAL,CAAWK,KAAvB;AACA,QAAIC,WAAW,GAAGD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AACpC;AAAA,cAAC,aAAD;AACE,QAAA,WAAW,EAAEA,IAAI,CAACC,WADpB;AAEE,QAAA,IAAI,EAAED,IAAI,CAACE,IAFb;AAGE,QAAA,QAAQ,EAAEF,IAAI,CAACG;AAHjB;AAAA;AAAA;AAAA;AAAA;AAKD,KANiB,CAAlB;AAOA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,6BACE;AAAI,QAAA,SAAS,EAAEhB,OAAO,CAACiB,QAAvB;AAAA,kBAAkCN;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAtB6B;;AAyBhC,MAAMO,eAAe,GAAIhB,KAAD,IAAW;AACjC,SAAO;AACLM,IAAAA,KAAK,EAAEN,KAAK,CAACiB,IAAN,CAAWX,KADb;AAELD,IAAAA,MAAM,EAAEL,KAAK,CAACiB,IAAN,CAAWZ,MAFd;AAGLa,IAAAA,KAAK,EAAElB,KAAK,CAACiB,IAAN,CAAWC,KAHb;AAILC,IAAAA,QAAQ,EAAEnB,KAAK,CAACiB,IAAN,CAAWE,QAJhB;AAKLC,IAAAA,OAAO,EAAEpB,KAAK,CAACiB,IAAN,CAAWG,OALf;AAMLZ,IAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,CAAYA;AANd,GAAP;AAQD,CATD;;AAUA,MAAMa,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLlB,IAAAA,aAAa,EAAE,CAACC,MAAD,EAASC,KAAT,KACbgB,QAAQ,CAAC3B,OAAO,CAAC4B,WAAR,CAAoBlB,MAApB,EAA4BC,KAA5B,CAAD,CAFL;AAGLkB,IAAAA,eAAe,EAAGC,IAAD,IAAUH,QAAQ,CAAC3B,OAAO,CAAC6B,eAAR,CAAwBC,IAAxB,CAAD;AAH9B,GAAP;AAKD,CAND;;AAOA,eAAe7B,OAAO,CAACoB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CtB,OAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport WorkComponent from \"../../components/Works/WorkComponent/WorkComponent\";\nimport classes from \"./Works.module.css\";\nclass MyWorks extends Component {\n  state = {\n    copied: false,\n  };\n  componentDidMount() {\n    this.props.onUploadWorks(this.props.userId, this.props.token);\n  }\n  copyPassword;\n  render() {\n    let works = this.props.works;\n    let worksRender = works.map((work) => {\n      <WorkComponent\n        description={work.description}\n        name={work.name}\n        password={work.password}\n      />;\n    });\n    return (\n      <React.Fragment>\n        <ul className={classes.WorkList}>{worksRender}</ul>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading,\n    works: state.works.works,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onUploadWorks: (userId, token) =>\n      dispatch(actions.uploadWorks(userId, token)),\n    setRedirectPath: (path) => dispatch(actions.setRedirectPath(path)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MyWorks);\n"]},"metadata":{},"sourceType":"module"}