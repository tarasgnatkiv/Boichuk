{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/Boichuk/src/containers/Tasks/MyTasks.js\";\nimport React, { Component } from \"react\";\nimport TaskComponent from \"./TaskConponent/TaskComponent\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\n\nclass MyTasks extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.showWorks = () => {\n      let MyWorks;\n\n      if (this.props.worksTasks) {\n        MyWorks = this.props.worksTasks.map(work => {\n          console.log(i);\n          return /*#__PURE__*/_jsxDEV(TaskComponent, {\n            description: work.description,\n            name: work.name\n          }, i.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 11\n          }, this);\n        });\n      } else {\n        MyWorks = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"None\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this);\n      }\n\n      return MyWorks;\n    };\n  }\n\n  componentDidMount() {\n    this.props.getWorksTasks(this.props.userId, this.props.token);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.showWorks()\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    loading: state.auth.loading,\n    worksTasks: state.works.worksTask\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getWorksTasks: (userId, token) => dispatch(actions.getWorksTasks(userId, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTasks);","map":{"version":3,"sources":["/home/vladichka/Boichuk/src/containers/Tasks/MyTasks.js"],"names":["React","Component","TaskComponent","actions","connect","MyTasks","showWorks","MyWorks","props","worksTasks","map","work","console","log","i","description","name","id","componentDidMount","getWorksTasks","userId","token","render","mapStateToProps","state","auth","error","loading","works","worksTask","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,OAAN,SAAsBL,KAAK,CAACC,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAKpCK,SALoC,GAKxB,MAAM;AAChB,UAAIC,OAAJ;;AACA,UAAI,KAAKC,KAAL,CAAWC,UAAf,EAA2B;AACzBF,QAAAA,OAAO,GAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,GAAtB,CAA2BC,IAAD,IAAU;AAC5CC,UAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACA,8BACE,QAAC,aAAD;AACE,YAAA,WAAW,EAAEH,IAAI,CAACI,WADpB;AAEE,YAAA,IAAI,EAAEJ,IAAI,CAACK;AAFb,aAGOF,CAAC,CAACG,EAHT;AAAA;AAAA;AAAA;AAAA,kBADF;AAOD,SATS,CAAV;AAUD,OAXD,MAWO;AACLV,QAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAV;AACD;;AAED,aAAOA,OAAP;AACD,KAvBmC;AAAA;;AACpCW,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,KAAL,CAAWW,aAAX,CAAyB,KAAKX,KAAL,CAAWY,MAApC,EAA4C,KAAKZ,KAAL,CAAWa,KAAvD;AACD;;AAsBDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA,gBAAG,KAAKhB,SAAL;AAAH,qBAAP;AACD;;AA3BmC;;AA8BtC,MAAMiB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLH,IAAAA,KAAK,EAAEG,KAAK,CAACC,IAAN,CAAWJ,KADb;AAELD,IAAAA,MAAM,EAAEI,KAAK,CAACC,IAAN,CAAWL,MAFd;AAGLM,IAAAA,KAAK,EAAEF,KAAK,CAACC,IAAN,CAAWC,KAHb;AAILC,IAAAA,OAAO,EAAEH,KAAK,CAACC,IAAN,CAAWE,OAJf;AAKLlB,IAAAA,UAAU,EAAEe,KAAK,CAACI,KAAN,CAAYC;AALnB,GAAP;AAOD,CARD;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLZ,IAAAA,aAAa,EAAE,CAACC,MAAD,EAASC,KAAT,KACbU,QAAQ,CAAC5B,OAAO,CAACgB,aAAR,CAAsBC,MAAtB,EAA8BC,KAA9B,CAAD;AAFL,GAAP;AAID,CALD;;AAMA,eAAejB,OAAO,CAACmB,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CzB,OAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport TaskComponent from \"./TaskConponent/TaskComponent\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\n\nclass MyTasks extends React.Component {\n  componentDidMount() {\n    this.props.getWorksTasks(this.props.userId, this.props.token);\n  }\n\n  showWorks = () => {\n    let MyWorks;\n    if (this.props.worksTasks) {\n      MyWorks = this.props.worksTasks.map((work) => {\n        console.log(i);\n        return (\n          <TaskComponent\n            description={work.description}\n            name={work.name}\n            key={i.id}\n          />\n        );\n      });\n    } else {\n      MyWorks = <div>None</div>;\n    }\n\n    return MyWorks;\n  };\n\n  render() {\n    return <>{this.showWorks()}</>;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    loading: state.auth.loading,\n    worksTasks: state.works.worksTask,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getWorksTasks: (userId, token) =>\n      dispatch(actions.getWorksTasks(userId, token)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTasks);\n"]},"metadata":{},"sourceType":"module"}