{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/proga/\\u041D\\u043E\\u0432\\u0438\\u0439-WinRAR-archive/NewManager/src/containers/Works/Works.js\";\nimport React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport WorkComponent from \"../../components/Works/WorkComponent/WorkComponent\";\nimport classes from \"./Works.module.css\";\nimport { Redirect } from \"react-router-dom\";\n\nclass MyWorks extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      works: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.onUploadWorks(this.props.userId, this.props.token);\n    this.setState({\n      works: this.props.works\n    });\n    this.props.setRedirectPath(\"null\");\n  }\n\n  render() {\n    let worksRender = this.state.wo.map((work, id) => {\n      return /*#__PURE__*/_jsxDEV(WorkComponent, {\n        description: work.description,\n        name: work.name,\n        password: work.password,\n        workId: work.id\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [redirect, /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes.WorkList,\n        children: worksRender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading,\n    works: state.works.works\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUploadWorks: (userId, token) => dispatch(actions.uploadWorks(userId, token)),\n    setRedirectPath: path => dispatch(actions.setRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyWorks);","map":{"version":3,"sources":["/home/vladichka/proga/Новий-WinRAR-archive/NewManager/src/containers/Works/Works.js"],"names":["React","Component","actions","connect","WorkComponent","classes","Redirect","MyWorks","state","works","componentDidMount","props","onUploadWorks","userId","token","setState","setRedirectPath","render","worksRender","wo","map","work","id","description","name","password","redirect","WorkList","mapStateToProps","auth","error","loading","mapDispatchToProps","dispatch","uploadWorks","path"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,oDAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AACA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BO,KAD8B,GACtB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADsB;AAAA;;AAE9BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,MAApC,EAA4C,KAAKF,KAAL,CAAWG,KAAvD;AACA,SAAKC,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWF;AAApB,KAAd;AACA,SAAKE,KAAL,CAAWK,eAAX,CAA2B,MAA3B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAEP,QAAIC,WAAW,GAAG,KAAKV,KAAL,CAAWW,EAAX,CAAcC,GAAd,CAAkB,CAACC,IAAD,EAAOC,EAAP,KAAc;AAChD,0BACE,QAAC,aAAD;AAEE,QAAA,WAAW,EAAED,IAAI,CAACE,WAFpB;AAGE,QAAA,IAAI,EAAEF,IAAI,CAACG,IAHb;AAIE,QAAA,QAAQ,EAAEH,IAAI,CAACI,QAJjB;AAKE,QAAA,MAAM,EAAEJ,IAAI,CAACC;AALf,SACOA,EADP;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAViB,CAAlB;AAWA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,iBACGI,QADH,eAEE;AAAI,QAAA,SAAS,EAAErB,OAAO,CAACsB,QAAvB;AAAA,kBAAkCT;AAAlC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AA3B6B;;AA8BhC,MAAMU,eAAe,GAAIpB,KAAD,IAAW;AACjC,SAAO;AACLM,IAAAA,KAAK,EAAEN,KAAK,CAACqB,IAAN,CAAWf,KADb;AAELD,IAAAA,MAAM,EAAEL,KAAK,CAACqB,IAAN,CAAWhB,MAFd;AAGLiB,IAAAA,KAAK,EAAEtB,KAAK,CAACqB,IAAN,CAAWC,KAHb;AAILJ,IAAAA,QAAQ,EAAElB,KAAK,CAACqB,IAAN,CAAWH,QAJhB;AAKLK,IAAAA,OAAO,EAAEvB,KAAK,CAACqB,IAAN,CAAWE,OALf;AAMLtB,IAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYA;AANd,GAAP;AAQD,CATD;;AAUA,MAAMuB,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLrB,IAAAA,aAAa,EAAE,CAACC,MAAD,EAASC,KAAT,KACbmB,QAAQ,CAAC/B,OAAO,CAACgC,WAAR,CAAoBrB,MAApB,EAA4BC,KAA5B,CAAD,CAFL;AAGLE,IAAAA,eAAe,EAAGmB,IAAD,IAAUF,QAAQ,CAAC/B,OAAO,CAACc,eAAR,CAAwBmB,IAAxB,CAAD;AAH9B,GAAP;AAKD,CAND;;AAOA,eAAehC,OAAO,CAACyB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CzB,OAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport WorkComponent from \"../../components/Works/WorkComponent/WorkComponent\";\nimport classes from \"./Works.module.css\";\nimport { Redirect } from \"react-router-dom\";\nclass MyWorks extends Component {\n  state = { works: [] };\n  componentDidMount() {\n    this.props.onUploadWorks(this.props.userId, this.props.token);\n    this.setState({ works: this.props.works });\n    this.props.setRedirectPath(\"null\");\n  }\n\n  render() {\n   \n    let worksRender = this.state.wo.map((work, id) => {\n      return (\n        <WorkComponent\n          key={id}\n          description={work.description}\n          name={work.name}\n          password={work.password}\n          workId={work.id}\n        />\n      );\n    });\n    return (\n      <React.Fragment>\n        {redirect}\n        <ul className={classes.WorkList}>{worksRender}</ul>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading,\n    works: state.works.works,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onUploadWorks: (userId, token) =>\n      dispatch(actions.uploadWorks(userId, token)),\n    setRedirectPath: (path) => dispatch(actions.setRedirectPath(path)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MyWorks);\n"]},"metadata":{},"sourceType":"module"}