{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/VladTaras/Boichuk/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./Auth.module.css\";\nimport Card from \"../../components/UI/Card/Card\";\nimport InputElement from \"../../components/UI/Input/Input\";\nimport ButtonElement from \"../../components/UI/Button/Button\";\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport * as actions from \"../../store/actions/index\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        nickname: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"\",\n            placeholder: \"VladichBub\"\n          },\n          label: \"Nickname\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 4,\n            isEmail: false\n          }\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          label: \"Email\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 6,\n            isEmail: true\n          }\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          label: \"Password\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 6,\n            maxLength: 25\n          }\n        },\n        confirmPassword: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Confirm password\"\n          },\n          label: \"Confirm password\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 6,\n            maxLength: 25\n          }\n        }\n      },\n      signUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          validation: { ...this.state.controls[controlName].validation,\n            valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation)\n          },\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.controls.confirmPassword.value, this.state.controls.nickname.value);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      console.log(value);\n      isValid = pattern.test(value) && isValid;\n      console.log(isValid);\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(element => {\n      return /*#__PURE__*/_jsxDEV(InputElement, {\n        changed: event => this.inputChangedHandler(event, element.id),\n        elementType: element.config.elementType,\n        elementConfig: element.config.elementConfig,\n        invalid: !element.config.validation.valid,\n        value: element.config.value,\n        shouldValidate: element.config.validation.required,\n        touched: element.config.touched,\n        label: element.config.label\n      }, element.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this);\n    });\n    let error = null;\n\n    if (this.props.error) {\n      error = /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"style\", {\n          children: \"@import url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.errorMessage,\n          children: this.props.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this);\n      console.log(\"fefef\");\n    }\n\n    let redirect = null;\n\n    if (this.props.redirect) {\n      redirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 18\n      }, this);\n    }\n\n    let spinner = null;\n\n    if (this.props.loading) {\n      spinner = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [spinner, /*#__PURE__*/_jsxDEV(Card, {\n        titleName: \"Authentification\",\n        width: \"500px\",\n        children: [redirect, /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: this.submitHandler,\n          children: [form, error, /*#__PURE__*/_jsxDEV(ButtonElement, {\n            btnType: \"Success\",\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (login, password, repeatPassword, nickname) => dispatch(actions.auth(login, password, repeatPassword, nickname))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/vladichka/VladTaras/Boichuk/src/containers/Auth/Auth.js"],"names":["React","Component","classes","Card","InputElement","ButtonElement","actionTypes","actions","Redirect","connect","Spinner","Auth","state","controls","nickname","elementType","elementConfig","type","placeholder","label","touched","value","validation","required","valid","minLength","isEmail","email","password","maxLength","confirmPassword","signUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","rules","isValid","trim","length","pattern","console","log","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","element","error","errorMessage","redirect","spinner","loading","mapStateToProps","token","auth","userId","mapDispatchToProps","dispatch","login","repeatPassword"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"./Auth.module.css\";\nimport Card from \"../../components/UI/Card/Card\";\nimport InputElement from \"../../components/UI/Input/Input\";\nimport ButtonElement from \"../../components/UI/Button/Button\";\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport * as actions from \"../../store/actions/index\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nclass Auth extends Component {\n  state = {\n    controls: {\n      nickname: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"\",\n          placeholder: \"VladichBub\",\n        },\n        label: \"Nickname\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 4,\n          isEmail: false,\n        },\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\",\n        },\n        label: \"Email\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 6,\n          isEmail: true,\n        },\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        label: \"Password\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 6,\n          maxLength: 25,\n        },\n      },\n      confirmPassword: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Confirm password\",\n        },\n        label: \"Confirm password\",\n        touched: false,\n        value: \"\",\n        validation: {\n          required: true,\n          valid: false,\n          minLength: 6,\n          maxLength: 25,\n        },\n      },\n    },\n    signUp: true,\n  };\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n    if (rules.isEmail) {\n      const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      console.log(value);\n      isValid = pattern.test(value) && isValid;\n      console.log(isValid);\n    }\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n    return isValid;\n  }\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        validation: {\n          ...this.state.controls[controlName].validation,\n          valid: this.checkValidity(\n            event.target.value,\n            this.state.controls[controlName].validation\n          ),\n        },\n        touched: true,\n      },\n    };\n    this.setState({ controls: updatedControls });\n  };\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.controls.confirmPassword.value,\n      this.state.controls.nickname.value\n    );\n  };\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n    let form = formElementsArray.map((element) => {\n      return (\n        <InputElement\n          key={element.id}\n          changed={(event) => this.inputChangedHandler(event, element.id)}\n          elementType={element.config.elementType}\n          elementConfig={element.config.elementConfig}\n          invalid={!element.config.validation.valid}\n          value={element.config.value}\n          shouldValidate={element.config.validation.required}\n          touched={element.config.touched}\n          label={element.config.label}\n        />\n      );\n    });\n    let error = null;\n    if (this.props.error) {\n      error = (\n        <React.Fragment>\n          <style>\n            @import\n            url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\n          </style>\n          <div className={classes.errorMessage}>{this.props.error}</div>\n        </React.Fragment>\n      );\n      console.log(\"fefef\");\n    }\n    let redirect = null;\n    if (this.props.redirect) {\n      redirect = <Redirect to={this.props.redirect} />;\n    }\n    let spinner = null;\n    if (this.props.loading) {\n      spinner = <Spinner />;\n    }\n    return (\n      <React.Fragment>\n        {spinner}\n        <Card titleName=\"Authentification\" width=\"500px\">\n          {redirect}\n          <form className={classes.form} onSubmit={this.submitHandler}>\n            {form}\n            {error}\n            <ButtonElement btnType=\"Success\">OK</ButtonElement>\n          </form>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (login, password, repeatPassword, nickname) =>\n      dispatch(actions.auth(login, password, repeatPassword, nickname)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}