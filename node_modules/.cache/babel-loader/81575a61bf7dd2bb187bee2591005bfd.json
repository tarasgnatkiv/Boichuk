{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\taras\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\Evolution\\\\Boichuk\\\\src\\\\containers\\\\Login\\\\Login.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./Login.module.css\";\nimport Card from \"../../components/UI/Card/Card\";\nimport InputElement from \"../../components/UI/Input/Input\";\nimport ButtonElement from \"../../components/UI/Button/Button\";\nimport * as actionTypes from \"../../store/actions/actionTypes\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          label: \"Email\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 6,\n            isEmail: true\n          }\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          label: \"Password\",\n          touched: false,\n          value: \"\",\n          validation: {\n            required: true,\n            valid: false,\n            minLength: 6,\n            maxLength: 25\n          }\n        }\n      },\n      signUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          validation: { ...this.state.controls[controlName].validation,\n            valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation)\n          },\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onLogin(this.state.controls.email.value, this.state.controls.password.value);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.token) {\n      this.props.setRedirectPath(\"/\");\n    } else {\n      this.props.setRedirectPath(\"null\");\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      console.log(value);\n      isValid = pattern.test(value) && isValid;\n      console.log(isValid);\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(element => {\n      return /*#__PURE__*/_jsxDEV(InputElement, {\n        changed: event => this.inputChangedHandler(event, element.id),\n        elementType: element.config.elementType,\n        elementConfig: element.config.elementConfig,\n        invalid: !element.config.validation.valid,\n        value: element.config.value,\n        shouldValidate: element.config.validation.required,\n        touched: element.config.touched,\n        label: element.config.label\n      }, element.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this);\n    });\n    let error = null;\n\n    if (this.props.error) {\n      error = /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"style\", {\n          children: \"@import url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.errorMessage,\n          children: this.props.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this);\n      console.log(\"fefef\");\n    }\n\n    let spinner = null;\n\n    if (this.props.loading) {\n      spinner = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this);\n    }\n\n    let redirect = null;\n\n    if (this.props.redirect) {\n      redirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 18\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [spinner, /*#__PURE__*/_jsxDEV(Card, {\n        titleName: \"Log in\",\n        width: \"500px\",\n        children: [redirect, /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: this.submitHandler,\n          children: [form, error, /*#__PURE__*/_jsxDEV(ButtonElement, {\n            btnType: \"Success\",\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    redirect: state.auth.redirect,\n    loading: state.auth.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogin: (login, password) => dispatch(actions.login(login, password)),\n    setRedirectPath: path => dispatch(actions.setRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["C:/Users/taras/OneDrive/Рабочий стол/Evolution/Boichuk/src/containers/Login/Login.js"],"names":["React","Component","classes","Card","InputElement","ButtonElement","actionTypes","actions","connect","Redirect","Spinner","Login","state","controls","email","elementType","elementConfig","type","placeholder","label","touched","value","validation","required","valid","minLength","isEmail","password","maxLength","signUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onLogin","componentDidMount","token","setRedirectPath","rules","isValid","trim","length","pattern","console","log","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","element","error","errorMessage","spinner","loading","redirect","mapStateToProps","auth","userId","mapDispatchToProps","dispatch","login","path"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport classes from \"./Login.module.css\";\r\nimport Card from \"../../components/UI/Card/Card\";\r\nimport InputElement from \"../../components/UI/Input/Input\";\r\nimport ButtonElement from \"../../components/UI/Button/Button\";\r\nimport * as actionTypes from \"../../store/actions/actionTypes\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nclass Login extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        label: \"Email\",\r\n        touched: false,\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          minLength: 6,\r\n          isEmail: true,\r\n        },\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        label: \"Password\",\r\n        touched: false,\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          minLength: 6,\r\n          maxLength: 25,\r\n        },\r\n      },\r\n    },\r\n    signUp: true,\r\n  };\r\n  componentDidMount() {\r\n    if (this.props.token) {\r\n      this.props.setRedirectPath(\"/\");\r\n    } else {\r\n      this.props.setRedirectPath(\"null\");\r\n    }\r\n  }\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n    if (!rules) {\r\n      return true;\r\n    }\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    if (rules.isEmail) {\r\n      const pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n      console.log(value);\r\n      isValid = pattern.test(value) && isValid;\r\n      console.log(isValid);\r\n    }\r\n    if (rules.isNumeric) {\r\n      const pattern = /^\\d+$/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n    return isValid;\r\n  }\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        validation: {\r\n          ...this.state.controls[controlName].validation,\r\n          valid: this.checkValidity(\r\n            event.target.value,\r\n            this.state.controls[controlName].validation\r\n          ),\r\n        },\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onLogin(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n    );\r\n  };\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n    let form = formElementsArray.map((element) => {\r\n      return (\r\n        <InputElement\r\n          key={element.id}\r\n          changed={(event) => this.inputChangedHandler(event, element.id)}\r\n          elementType={element.config.elementType}\r\n          elementConfig={element.config.elementConfig}\r\n          invalid={!element.config.validation.valid}\r\n          value={element.config.value}\r\n          shouldValidate={element.config.validation.required}\r\n          touched={element.config.touched}\r\n          label={element.config.label}\r\n        />\r\n      );\r\n    });\r\n    let error = null;\r\n    if (this.props.error) {\r\n      error = (\r\n        <React.Fragment>\r\n          <style>\r\n            @import\r\n            url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');\r\n          </style>\r\n          <div className={classes.errorMessage}>{this.props.error}</div>\r\n        </React.Fragment>\r\n      );\r\n      console.log(\"fefef\");\r\n    }\r\n    let spinner = null;\r\n    if (this.props.loading) {\r\n      spinner = <Spinner />;\r\n    }\r\n    let redirect = null;\r\n    if (this.props.redirect) {\r\n      redirect = <Redirect to={this.props.redirect} />;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {spinner}\r\n        <Card titleName=\"Log in\" width=\"500px\">\r\n          {redirect}\r\n          <form className={classes.form} onSubmit={this.submitHandler}>\r\n            {form}\r\n            {error}\r\n            <ButtonElement btnType=\"Success\">OK</ButtonElement>\r\n          </form>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n    error: state.auth.error,\r\n    redirect: state.auth.redirect,\r\n    loading: state.auth.loading,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onLogin: (login, password) => dispatch(actions.login(login, password)),\r\n    setRedirectPath: (path) => dispatch(actions.setRedirectPath(path)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n"]},"metadata":{},"sourceType":"module"}