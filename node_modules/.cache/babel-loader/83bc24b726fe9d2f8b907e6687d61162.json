{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/Boichuk/src/containers/Tasks/MyTasks.js\";\nimport React, { Component } from \"react\";\nimport TaskComponent from './TaskConponent/TaskComponent';\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\n\nclass MyTasks extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.showWorks = () => {\n      let MyWorks;\n\n      if (this.props.worksTasks) {\n        MyWorks = this.props.worksTasks.map(i => {\n          return /*#__PURE__*/_jsxDEV(TaskComponent, {\n            info: i\n          }, i.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 25\n          }, this);\n        });\n      } else {\n        MyWorks = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"None\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 23\n        }, this);\n      }\n\n      return MyWorks;\n    };\n  }\n\n  componentDidMount() {\n    this.props.getWorksTasks(this.props.userId, this.props.token);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.showWorks()\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.auth.error,\n    loading: state.auth.loading,\n    worksTasks: state.works.worksTask\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getWorksTasks: (userId, token) => dispatch(actions.getWorksTasks(userId, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyTasks);","map":{"version":3,"sources":["/home/vladichka/Boichuk/src/containers/Tasks/MyTasks.js"],"names":["React","Component","TaskComponent","actions","connect","MyTasks","showWorks","MyWorks","props","worksTasks","map","i","id","componentDidMount","getWorksTasks","userId","token","render","mapStateToProps","state","auth","error","loading","works","worksTask","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAIA,MAAMC,OAAN,SAAsBL,KAAK,CAACC,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAMlCK,SANkC,GAMtB,MAAM;AACd,UAAIC,OAAJ;;AACA,UAAI,KAAKC,KAAL,CAAWC,UAAf,EAA2B;AACvBF,QAAAA,OAAO,GAAG,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,GAAtB,CAA0BC,CAAC,IAAI;AACrC,8BAAQ,QAAC,aAAD;AAAe,YAAA,IAAI,EAAEA;AAArB,aAA6BA,CAAC,CAACC,EAA/B;AAAA;AAAA;AAAA;AAAA,kBAAR;AACH,SAFS,CAAV;AAGH,OAJD,MAIO;AACHL,QAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAV;AACH;;AAED,aAAOA,OAAP;AACH,KAjBiC;AAAA;;AAElCM,EAAAA,iBAAiB,GAAG;AAChB,SAAKL,KAAL,CAAWM,aAAX,CAAyB,KAAKN,KAAL,CAAWO,MAApC,EAA4C,KAAKP,KAAL,CAAWQ,KAAvD;AACH;;AAeDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,KAAKX,SAAL;AADL,qBADJ;AAKH;;AAzBiC;;AA4BtC,MAAMY,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACLH,IAAAA,KAAK,EAAEG,KAAK,CAACC,IAAN,CAAWJ,KADb;AAELD,IAAAA,MAAM,EAAEI,KAAK,CAACC,IAAN,CAAWL,MAFd;AAGLM,IAAAA,KAAK,EAAEF,KAAK,CAACC,IAAN,CAAWC,KAHb;AAILC,IAAAA,OAAO,EAAEH,KAAK,CAACC,IAAN,CAAWE,OAJf;AAKLb,IAAAA,UAAU,EAAEU,KAAK,CAACI,KAAN,CAAYC;AALnB,GAAP;AAOD,CARH;;AASE,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACLZ,IAAAA,aAAa,EAAE,CAACC,MAAD,EAASC,KAAT,KAAmBU,QAAQ,CAACvB,OAAO,CAACW,aAAR,CAAsBC,MAAtB,EAA8BC,KAA9B,CAAD;AADrC,GAAP;AAGH,CAJD;;AAKA,eAAeZ,OAAO,CAACc,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CpB,OAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport TaskComponent from './TaskConponent/TaskComponent'\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\n\n\n\nclass MyTasks extends React.Component {\n\n    componentDidMount() {\n        this.props.getWorksTasks(this.props.userId, this.props.token);\n    }\n\n    showWorks = () => {\n        let MyWorks\n        if (this.props.worksTasks) {\n            MyWorks = this.props.worksTasks.map(i => {\n                return  <TaskComponent info={i} key={i.id}/>\n            })\n        } else {\n            MyWorks = <div>None</div>\n        }\n\n        return MyWorks\n    };\n\n    render() {\n        return (\n            <>\n                {this.showWorks()}\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      token: state.auth.token,\n      userId: state.auth.userId,\n      error: state.auth.error,\n      loading: state.auth.loading,\n      worksTasks: state.works.worksTask\n    };\n  };\n  const mapDispatchToProps = (dispatch) => {\n      return {\n        getWorksTasks: (userId, token) => dispatch(actions.getWorksTasks(userId, token))\n      };\n  };\n  export default connect(mapStateToProps, mapDispatchToProps)(MyTasks);\n"]},"metadata":{},"sourceType":"module"}