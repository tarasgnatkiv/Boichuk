{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/vladichka/Boichuk/src/containers/SelectedWorkWorkers/SelectedWorkWorkers.js\";\nimport React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport UserComponent from \"../../components/User/User\";\nimport classes from \"./SelectedWorkWorkers.module.css\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nclass SelectedWorkWorkers extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      workId: \"lol\"\n    };\n  }\n\n  componentDidMount() {\n    const search = this.props.location.search;\n    const params = new URLSearchParams(search);\n    const workId = params.get(\"workId\");\n    this.setState({\n      workId: workId\n    });\n\n    if (this.props.jobWorkers.length != 0) {\n      this.props.onSetEmptyWorkers();\n    }\n\n    this.props.onUploadWorkers(workId, this.props.userId, this.props.token);\n  }\n\n  render() {\n    let spinner = null;\n\n    if (this.props.loading) {\n      spinner = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this);\n    }\n\n    let error = null;\n\n    if (this.props.error) {\n      error = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.props.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this);\n    }\n\n    console.log(this.props.jobWorkers);\n    let workersToRender = this.props.jobWorkers.map(worker => {\n      return /*#__PURE__*/_jsxDEV(UserComponent, {\n        selectedUserId: worker.userId,\n        userName: worker.nickname,\n        userRating: \"high\",\n        userTasks: 2,\n        workId: this.state.workId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [error, spinner, /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes.UserList,\n        children: workersToRender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.jobWorkers.error,\n    redirect: state.auth.redirect,\n    loading: state.jobWorkers.loading,\n    jobWorkers: state.jobWorkers.workers\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogin: (login, password) => dispatch(actions.login(login, password)),\n    setRedirectPath: path => dispatch(actions.setRedirectPath(path)),\n    onUploadWorkers: (workId, userId, token) => dispatch(actions.uploadWorkers(workId, userId, token)),\n    onSetEmptyWorkers: () => dispatch(actions.setEmptyWorkers())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedWorkWorkers);","map":{"version":3,"sources":["/home/vladichka/Boichuk/src/containers/SelectedWorkWorkers/SelectedWorkWorkers.js"],"names":["React","Component","actions","connect","withRouter","UserComponent","classes","Spinner","SelectedWorkWorkers","state","workId","componentDidMount","search","props","location","params","URLSearchParams","get","setState","jobWorkers","length","onSetEmptyWorkers","onUploadWorkers","userId","token","render","spinner","loading","error","console","log","workersToRender","map","worker","nickname","UserList","mapStateToProps","auth","redirect","workers","mapDispatchToProps","dispatch","onLogin","login","password","setRedirectPath","path","uploadWorkers","setEmptyWorkers"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport UserComponent from \"../../components/User/User\";\nimport classes from \"./SelectedWorkWorkers.module.css\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nclass SelectedWorkWorkers extends Component {\n  state = {\n    workId: \"lol\",\n  };\n  componentDidMount() {\n    const search = this.props.location.search;\n    const params = new URLSearchParams(search);\n    const workId = params.get(\"workId\");\n    this.setState({ workId: workId });\n    if (this.props.jobWorkers.length != 0) {\n      this.props.onSetEmptyWorkers();\n    }\n    this.props.onUploadWorkers(workId, this.props.userId, this.props.token);\n  }\n  render() {\n    let spinner = null;\n    if (this.props.loading) {\n      spinner = <Spinner />;\n    }\n    let error = null;\n    if (this.props.error) {\n      error = <div>{this.props.error}</div>;\n    }\n    console.log(this.props.jobWorkers);\n\n    let workersToRender = this.props.jobWorkers.map((worker) => {\n      return (\n        <UserComponent\n          selectedUserId={worker.userId}\n          userName={worker.nickname}\n          userRating={\"high\"}\n          userTasks={2}\n          workId={this.state.workId}\n        />\n      );\n    });\n    return (\n      <React.Fragment>\n        {error}\n        {spinner}\n        <ul className={classes.UserList}>{workersToRender}</ul>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    token: state.auth.token,\n    userId: state.auth.userId,\n    error: state.jobWorkers.error,\n    redirect: state.auth.redirect,\n    loading: state.jobWorkers.loading,\n    jobWorkers: state.jobWorkers.workers,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onLogin: (login, password) => dispatch(actions.login(login, password)),\n    setRedirectPath: (path) => dispatch(actions.setRedirectPath(path)),\n    onUploadWorkers: (workId, userId, token) =>\n      dispatch(actions.uploadWorkers(workId, userId, token)),\n    onSetEmptyWorkers: () => dispatch(actions.setEmptyWorkers()),\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectedWorkWorkers);\n"]},"metadata":{},"sourceType":"module"}